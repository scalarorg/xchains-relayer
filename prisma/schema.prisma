generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RelayData {
  id                    String                 @id @db.VarChar(255)
  packetSequence        Int?                   @unique
  executeHash           String?                @db.VarChar(255)
  status                Int                    @default(0)
  from                  String                 @db.VarChar(255)
  to                    String                 @db.VarChar(255)
  createdAt             DateTime               @default(now()) @db.Timestamp(6)
  updatedAt             DateTime               @default(now()) @db.Timestamp(6)
  callContractWithToken CallContractWithToken?
  callContract          CallContract?
}

model CallContractWithToken {
  id                    String    @id @db.VarChar(255)
  blockNumber           Int?      @default(0)
  contractAddress       String    @db.VarChar(255)
  amount                String    @db.VarChar(255)
  symbol                String    @db.VarChar(255)
  payload               String
  payloadHash           String    @db.VarChar(255)
  sourceAddress         String    @db.VarChar(255)
  createdAt             DateTime  @default(now()) @db.Timestamp(6)
  updatedAt             DateTime  @default(now()) @db.Timestamp(6)
  RelayData             RelayData @relation(fields: [id], references: [id])
}

model CallContract {
  id                    String    @id @db.VarChar(255)
  txHash                String    @db.VarChar(255)
  txHex                 Bytes?  
  blockNumber           Int?      @default(0)
  logIndex              Int? 
  contractAddress       String    @db.VarChar(255)
  amount                String?    @db.VarChar(255)
  symbol                String?    @db.VarChar(255)
  payload               Bytes?
  payloadHash           String    @db.VarChar(255)
  sourceAddress         String    @db.VarChar(255)
  stakerPublicKey       String?    @db.VarChar(255) // Hex 32 bytes for locking flow
  senderAddress        String?    @db.VarChar(255) // Hex 20 bytes for unlocking flow or any chains different from btc
  createdAt             DateTime  @default(now()) @db.Timestamp(6)
  updatedAt             DateTime  @default(now()) @db.Timestamp(6)
  callContractApproved  CallContractApproved? 
  RelayData             RelayData @relation(fields: [id], references: [id])
  @@unique([payloadHash])
}

model CallContractApproved {
  id                    String    @id @db.VarChar(255)
  sourceChain           String    @db.VarChar(255) 
  destinationChain      String    @db.VarChar(255)
  txHash                String    @db.VarChar(255)
  blockNumber           Int
  logIndex              Int     
  sourceAddress         String    @db.VarChar(255)
  contractAddress       String    @db.VarChar(255)
  sourceTxHash          String    @db.VarChar(255)
  sourceEventIndex      Int
  payloadHash           String    @db.VarChar(255)
  commandId             String
  callContractId        String?   @db.VarChar(255) @unique
  CallContract          CallContract? @relation(fields: [callContractId], references: [id])
  createdAt       DateTime  @default(now()) @db.Timestamp(6)
  updatedAt       DateTime  @default(now()) @db.Timestamp(6)
}

model CallContractWithTokenApproved {
  id                    String    @id @db.VarChar(255)
  sourceChain           String    @db.VarChar(255) 
  destinationChain      String    @db.VarChar(255)
  txHash                String    @db.VarChar(255)
  blockNumber           Int
  logIndex              Int     
  sourceAddress         String    @db.VarChar(255)
  contractAddress       String    @db.VarChar(255)
  sourceTxHash          String    @db.VarChar(255)
  sourceEventIndex      BigInt
  payloadHash           String    @db.VarChar(255)
  symbol                String    @db.VarChar(255)
  amount                BigInt
  commandId             String
  createdAt       DateTime  @default(now()) @db.Timestamp(6)
  updatedAt       DateTime  @default(now()) @db.Timestamp(6)
}
model CommandExecuted {
  id                    String    @id @db.VarChar(255)
  sourceChain           String    @db.VarChar(255) 
  destinationChain      String    @db.VarChar(255)
  txHash                String    @db.VarChar(255)
  blockNumber           Int
  logIndex              Int     
  commandId             String
  status                Int       @default(0)
  referenceTxHash       String?    @db.VarChar(255)
  amount                String?    @db.VarChar(255)
}
model Operatorship {
  id   Int    @id @default(autoincrement())
  hash String
}
