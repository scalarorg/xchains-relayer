import { validateProof } from '../src/handler/authHandler';
import { _validateSignatures } from '../src/handler/authHandler';
import { ethers } from 'ethers';
const chai = require('chai');
const expect = chai.expect;

module.exports = () => {
  describe('validateProof', () => {
    it('should return when signatures is valid', async () => {
      const data =
        '0x0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000001c87cd77dadcb1763e456b172a60a1b6fc7c252d5b9df8c8d9b4d44bb22bb1cca000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000013617070726f7665436f6e747261637443616c6c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000009f3ed8159e7c0fe44ccd945870f6ddd3062d58b217de05b751c33a9279267f8bb7b5500db56b0e951a2ac6199502f1076bd1d030e397abe94fc635dd374f801709af72dab6f4ffe375061d7fe188fb89692e4c5600000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000010657468657265756d2d7365706f6c696100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a30783946334564383135396537633046653434436364393435383730663644444433303632443538423200000000000000000000000000000000000000000000';
      const dataHash = ethers.utils.keccak256(data);
      const messageHash = ethers.utils.hashMessage(ethers.utils.arrayify(dataHash));
      const operators = [
        '0x02C5623bed54E9618991Ba7Dd7247de50160e402',
        '0x6426218731506b2D54C7388470e7a94885032db0',
        '0xD581Be54bDBe90748F47a5A348266a3E39870D80',
        '0xd8f2867647eFbB42dc7F97e024DE97950D07a63B',
      ];
      const weights = [20000, 40000, 10000, 30000];
      const threshold = 60000;
      const signatures = [
        '0xbdc43daa00c9dae8166d57a22504027ee810c71deb0eff3dd38f4d9d0da5866f2b04e543f3fbfc66e6c6309fc479ef3d959b749b86883b6baf6249c2d1c7a79c1c',
        '0xac00a9d4941d24d07a049e6681b007634712d2f392c5d3c7c435446809c85df10f623ee977e43f492aa9ab443524cc8e37e81c3f9635adb50217e6ead36cb5491c',
      ];
      _validateSignatures(messageHash, operators, weights, threshold, signatures);
    });

    it('should return true when the proof is valid', async () => {
      const data =
        '0x0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000001c87cd77dadcb1763e456b172a60a1b6fc7c252d5b9df8c8d9b4d44bb22bb1cca000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000013617070726f7665436f6e747261637443616c6c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000009f3ed8159e7c0fe44ccd945870f6ddd3062d58b217de05b751c33a9279267f8bb7b5500db56b0e951a2ac6199502f1076bd1d030e397abe94fc635dd374f801709af72dab6f4ffe375061d7fe188fb89692e4c5600000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000010657468657265756d2d7365706f6c696100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a30783946334564383135396537633046653434436364393435383730663644444433303632443538423200000000000000000000000000000000000000000000';
      const dataHash = ethers.utils.keccak256(data);
      const messageHash = ethers.utils.hashMessage(ethers.utils.arrayify(dataHash));
      const proof =
        '0x00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000ea6000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000000400000000000000000000000002c5623bed54e9618991ba7dd7247de50160e4020000000000000000000000006426218731506b2d54c7388470e7a94885032db0000000000000000000000000d581be54bdbe90748f47a5a348266a3e39870d80000000000000000000000000d8f2867647efbb42dc7f97e024de97950d07a63b00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000004e200000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000075300000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000041bdc43daa00c9dae8166d57a22504027ee810c71deb0eff3dd38f4d9d0da5866f2b04e543f3fbfc66e6c6309fc479ef3d959b749b86883b6baf6249c2d1c7a79c1c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041ac00a9d4941d24d07a049e6681b007634712d2f392c5d3c7c435446809c85df10f623ee977e43f492aa9ab443524cc8e37e81c3f9635adb50217e6ead36cb5491c00000000000000000000000000000000000000000000000000000000000000';
      const result = await validateProof(messageHash, proof);
      expect(result).to.be.true;
    });
  });
};
